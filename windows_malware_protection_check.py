"""
windows_malware_protection_check.py

Windows Defender / AntiVirus compliance checks via PowerShell.
Requires: Windows (PowerShell available). Some checks may require admin privileges.

Usage:
    import windows_malware_protection_check as wmp
    av_status = wmp.get_defender_status()
"""

import subprocess
import json
from typing import Dict, Any


def _run_powershell(ps_cmd: str) -> str:
    """Run a PowerShell command and return stdout (text)."""
    proc = subprocess.run(
        ["powershell", "-NoProfile", "-NonInteractive", "-Command", ps_cmd],
        capture_output=True,
        text=True,
    )
    if proc.returncode != 0:
        raise RuntimeError(f"PowerShell error: {proc.stderr.strip() or proc.stdout.strip()}")
    return proc.stdout.strip()


def _ps_json(cmd_without_convert: str):
    """Run PowerShell command, convert to JSON, return as Python object."""
    ps = f"{cmd_without_convert} | ConvertTo-Json -Depth 6"
    out = _run_powershell(ps)
    if not out:
        return None
    try:
        return json.loads(out)
    except json.JSONDecodeError:
        return out


def get_defender_status() -> Dict[str, Any]:
    """
    Checks Microsoft Defender status, real-time protection, signature versions, last update, tamper protection.
    """
    result: Dict[str, Any] = {}

    # Defender / AV status
    try:
        status = _ps_json("Get-MpComputerStatus | Select-Object AMServiceEnabled,AntivirusEnabled,RealTimeProtectionEnabled,AntispywareEnabled,QuickScanSignatureVersion,AVSignatureVersion,AntivirusSignatureLastUpdated,AntivirusSignatureAge")
        result.update(status if isinstance(status, dict) else {})
    except Exception as e:
        result["DefenderStatusError"] = str(e)

    # Tamper Protection
    try:
        tp_status = _run_powershell(r"""
        try {
            $regPath = "HKLM:\SOFTWARE\Microsoft\Windows Defender\Features"
            $tp = Get-ItemProperty -Path $regPath -Name TamperProtection -ErrorAction Stop
            if ($tp.TamperProtection -eq 5) { "Enabled" }
            elseif ($tp.TamperProtection -eq 4) { "Audit" }
            else { "Disabled/Unknown" }
        } catch {
            "NotAvailable"
        }
        """)
        result["TamperProtection"] = tp_status
    except Exception as e:
        result["TamperProtectionError"] = str(e)

    return result


if __name__ == "__main__":
    print("Malware Protection (Defender/AV) status:")
    print(json.dumps(get_defender_status(), indent=2))
